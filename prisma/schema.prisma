// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Enable PostgreSQL extensions
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto] // Enable pgcrypto extension for UUID generation
}

// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   name      String
//   avatar    String?
//   googleId  String?  @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   categories     Category[]
//   knowledgeItems KnowledgeItem[]
//   sharedItems    SharedItem[]

//   @@map("users")
// }

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  // Traditional auth fields
  password   String? // Optional for Google OAuth users
  isVerified Boolean @default(false)

  // Google OAuth fields
  googleId String? @unique
  picture  String?

  // Password reset
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  // Email verification
  verificationToken   String?
  verificationExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories     Category[]
  knowledgeItems KnowledgeItem[]
  sharedItems    SharedItem[]
  RefreshToken   RefreshToken[]

  @@map("users")
}

// Optional: Store refresh tokens
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCategories  SubCategory[]
  knowledgeItems KnowledgeItem[]

  @@map("categories")
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  categoryId  String
  userId      String
  createdAt   DateTime @default(now())

  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  knowledgeItems KnowledgeItem[]

  @@map("subcategories")
}

model KnowledgeItem {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  type          ItemType @default(TEXT)
  tags          String[]
  isPublic      Boolean  @default(false)
  categoryId    String?
  subCategoryId String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
  sharedWith  SharedItem[]

  @@map("knowledge_items")
}

model SharedItem {
  id              String     @id @default(cuid())
  knowledgeItemId String
  userId          String
  permissions     Permission @default(VIEW)
  createdAt       DateTime   @default(now())

  knowledgeItem KnowledgeItem @relation(fields: [knowledgeItemId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([knowledgeItemId, userId])
  @@map("shared_items")
}

enum ItemType {
  TEXT
  IMAGE
  AUDIO
}

enum Permission {
  VIEW
  EDIT
}
